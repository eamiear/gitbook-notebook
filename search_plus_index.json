{"./":{"url":"./","title":"简介","keywords":"","body":"GitBook NoteBook 使用 Git 和 Markdown 编写一本书 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"installation/":{"url":"installation/","title":"安装","keywords":"","body":"基本安装 本地安装 系统环境要求： NodeJS （v4.0.0 及以上版本） Windows， Linux， Unix，或者 Mac OS X Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"installation/nodejs-install.html":{"url":"installation/nodejs-install.html","title":"安装 Node.js","keywords":"","body":"安装nodejs 下载安装最新版本的nodejs (https://nodejs.org/en/)。安装成功后，查看版本 >node -v v10.15.3 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"installation/gitbook-install.html":{"url":"installation/gitbook-install.html","title":"安装Gitbook命令行","keywords":"","body":"安装 GitBook 命令 通过 NPM 进行安装，在命令行窗口中执行下面命令安装 GitBook: npm install gitbook-cli -g 执行以下命令检查是否安装成功： gitbook --version CLI version: 2.3.2 GitBook version: 3.2.2 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"installation/gitbook-cli.html":{"url":"installation/gitbook-cli.html","title":"Gitbook命令概览","keywords":"","body":"命令行概念 初始化 初始化一本书 gitbook init gitbook init ./directory 在当前目录初始化一本书或创建一个空目录并初始化 本地预览 gitbook serve gitbook serve ./{book_name} 本地文件修改后，实时预览文件变化 发布电子书 gitbook build # 将书籍构建结果存放到{destination}目录下 gitbook build {resource} {destination} gitbok build ./ --log=debug --debug 书籍编写完后，可构建生成静态站点。 --log=debug --debug 进入调试模式，输出更友好的堆栈错误信息 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/":{"url":"content/","title":"内容","keywords":"","body":"目录结构 GitBook 目录结构比较简单，所有 Markdown 文件罗列在 SUMMARY 文件，最终转换成 HTML 文件 GitBook 基本结构： . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md 文件概述： 文件 描述 book.json 文件配置(optional) README.md 图书简介 (required) SUMMARY.md 内容 (optional) GLOSSARY.md 要注释的术语列表 (optional) Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/directory.html":{"url":"content/directory.html","title":"目录","keywords":"","body":"目录 SUMMARY SUMMARY.md 用来定义章节或子章节目录结构，并用于生成图书目录。 SUMMARY.md 是一组链接列表，链接标题为章节标题，链接路径指向章节文件。 嵌套链接列表即为在父章节下创建子章节。 多级目录 # Summary * [Introduction](README.md) * [安装](installation/README.md) * [安装 Node.js](installation/nodejs-install.md) * [安装Gitbook命令行](installation/gitbook-install.md) * [Gitbook命令概览](installation/gitbook-cli.md) 注意： 如果一级目录的链接为空，表现结果为不可点击。 部分 章节目录可以通过标题或者水平分割线划分成不同的部分，即为一组章节 # Summary ### Part I * [Writing is nice](part1/writing.md) * [GitBook is nice](part1/gitbook.md) ### Part II * [We love feedback](part2/feedback_please.md) * [Better tools for authors](part2/better_tools.md) ---- * [Last part without title](part3/title.md) 锚点 目录中的章节可以通过锚点指向文章特殊部分。 # Summary ### Part I * [Part I](part1/README.md) * [Writing is nice](part1/README.md#writing) * [GitBook is nice](part1/README.md#gitbook) * [Part II](part2/README.md) * [We love feedback](part2/README.md#feedback) * [Better tools for authors](part2/README.md#tools) Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/static-files.html":{"url":"content/static-files.html","title":"静态文件","keywords":"","body":"静态资源 SUMMARY.md 中不会罗列静态文件。除了忽略文件，所有的静态资源都会拷贝到输出目录。 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/ignore-files.html":{"url":"content/ignore-files.html","title":"忽略文件","keywords":"","body":"忽略文件 GitBook读取并排除 .gitignore, .bookignore 和 .ignore 文件中列举的文件或文件夹，格式与 .gitignore 一致。 # This is a comment # Ignore the file test.md test.md # Ignore everything in the directory \"bin\" bin/* Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/configuration.html":{"url":"content/configuration.html","title":"配置","keywords":"","body":"配置 GitBook 通过 book.json 文件进行图书配置。 常规配置 变量 描述 root 包含所有图书文件的根目录路径, book.json 除外 structure 定义 Readme, Summary, Glossary 路径. title 图书标题，默认从README.md中提取. description 图书简介，默认从README中提取 author 图书作者 isbn 图书 ISBN language 图书语言 direction 文本方向( rtl 或 ltr), 默认由图书语言决定 gitbook gitbook 插件 变量 描述 plugins 插件列表 pluginsConfig 插件配置 结构 除根 (root) 变量外，可以指定Readme, Summary， Glossary, languages的文件名称，以修改 GitBook 默认文件名。这些文件需要放在图书根目录下。 变量 描述 structure.readme Readme文件名 (默认是 README.md) structure.summary Summary文件名 (默认SUMMARY.md) structure.glossary Glossary文件名 (默认 GLOSSARY.md) structure.languages Languages文件名 (默认 LANGS.md) PDF选项 可对导出的PDF进行属性配置 变量 描述 pdf.pageNumbers 每页添加页数 (默认 true) pdf.fontSize 基本的字体大小 (默认 12) pdf.fontFamily 基本字体系列 (默认 Arial) pdf.paperSize 纸张大小, 可选项有'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'legal', 'letter' (默认 a4) pdf.margin.top 顶部边距 (默认 56) pdf.margin.bottom 底部边距 (默认56) pdf.margin.right 右边距 (默认 62) pdf.margin.left 左边距 (默认 62) Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/glossary.html":{"url":"content/glossary.html","title":"术语汇编","keywords":"","body":"术语汇编 术语汇编由术语项及其描述组成，GitBook 会自动为这些术语汇编构建索引表，同时在页面中对这些术语进行高亮显示。 GLOSSARY.md 是由 h2头部及一段描述组成的列表： ## Term Definition for this term ## Another term With it's definition, this can contain bold text and all other kinds of inline markup ... Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/multi-language.html":{"url":"content/multi-language.html","title":"多语言","keywords":"","body":"多语言 GitBook 支持构建用多种语言编写的图书，每种语言应该是一个子目录，并遵循正常的 GitBook 格式。此外，仓库根目录下需包含一个 LANGS.md 文件，并按照下面格式编写： # Languages * [English](en/) * [French](fr/) * [Español](es/) 各种语言的配置 当一本语言书包含 book.json 文件时，它的配置会继承覆盖主配置。 但 plugins 插件除外，插件只能全局配置，其他语言不能进行特定配置。 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"content/cover.html":{"url":"content/cover.html","title":"封面","keywords":"","body":"封面 封面可用于所有图书格式，可以自行提供封面图片，也可以通过 autocover 插件生成 使用封面时，封面图片需放在图书根目录下，且图片应该是JPEG文件，图片命名为 cover.jpg，如需定义小版本封面，额外添加 cover_small.jpg 文件。 好的封面遵循以下规则： cover.jpg规格为 1800x2360， cover_small.jpg规格为 200x262 封面图片没有边框 清晰可见的图书标题 任何重要的文本在小版本封面图片中都应该可见 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"output/":{"url":"output/","title":"输出电子书","keywords":"","body":"输出 GitBook 可以输出多种格式的图书： 静态HTML站点 PDF格式 eBook格式（ePub，Mobi） Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"output/website.html":{"url":"output/website.html","title":"网页站点","keywords":"","body":"静态站点 有两种方式生成静态站点 本地编辑预览 gitbook serve ./{book_name} 在图书编写的过程中，可用该模式进行实时预览。 GitBook 在图书目录下解析生成一个 _book 目录，并监听4000端口，实时感知文件变化并更新。 下面在 gitbook-notebook 图书目录下，执行 gitbook serve >gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 15 pages info: found 17 asset files info: >> generation finished with success in 1.2s ! Starting server ... Serving book on http://localhost:4000 打开浏览器，输入http://localhost:4000查看站点 构建输出 GitBook build {resource} {destination} 如将 gitbook-notebook 构建存放到 gitbook-notebook/docs 目录下： >gitbook build . ./docs info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 15 pages info: found 18 asset files info: >> generation finished with success in 2.7s ! 命令执行结束后，gitbook-notebook 目录下会生成一个 docs 目录，里面的内容即为解析生成的静态站点 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"output/ebook.html":{"url":"output/ebook.html","title":"输出电子书","keywords":"","body":"输出电子书 输出电子书（pdf、ePub、mobi）依赖 ebook-convert，需要安装 Calibre 应用 window 下载安装calibre-64bit-3.42.0.msi，并将calibre安装目录下的ebook-convert路径添加到环境变量 --> 系统变量的PATH路径中。 如 calibre 安装在 D://Calibre/ 目录，则将 D://Calibre/ebook-convert添加系统PATH变量中 > ebook-convert 用法: ebook-convert.exe input_file output_file [options] 生成PDF 使用下面命令生成PDF文件 gitbook pdf {resource} {file} gitbook pdf ./ ./mybook.pdf {resource} 资源路径可以相对路径或绝对路径 {file} 生成文件路径 gitbook-notebook>gitbook pdf info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 15 pages info: found 19 asset files info: >> generation finished with success in 8.1s ! info: >> 1 file(s) generated 生成ePub gitbook-notebook>gitbook epub . ./myBook.epub info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 15 pages info: found 20 asset files info: >> generation finished with success in 3.5s ! info: >> 1 file(s) generated 生成mobi gitbook-notebook>gitbook mobi . info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 15 pages info: found 21 asset files info: >> generation finished with success in 4.3s ! info: >> 1 file(s) generated Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"plugins/":{"url":"plugins/","title":"插件","keywords":"","body":"插件 GitBook 通过插件可以附加更多能力，所有插件可以从https://plugins.gitbook.com/获取。 注意 新版GitBook对插件系统做了调整 安装插件 插件先在book.json文件中进行配置： { \"plugins\": [ \"-search\", \"search-pro\", \"advanced-emoji\", \"emphasize\", \"include-codeblock\", \"ace\", \"splitter\", \"favicon\", \"expandable-chapters-small\", \"sitemap-general\", \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright © eamiear\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"sitemap-general\": { \"prefix\": \"https://eamiear.gitbooks.io\" }, \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\" }, \"include-codeblock\": { \"template\": \"ace\", \"theme\": \"monokai\" } } } 配置完后，通过命令进行安装： gitbook install 样式插件 功能插件 统计插件 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"publish/":{"url":"publish/","title":"发布","keywords":"","body":"发布 图书编写完后，可以发布到 GitBook 平台或 GitHub Pages 服务 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"publish/gitbook.html":{"url":"publish/gitbook.html","title":"发布到GitBook","keywords":"","body":"发布到GitBook 写好的图书可以发布到 GitBook 平台 https://legacy.gitbook.com/，类似于 GitHub 平台，可在 GitBook 平台托管图书源码，编辑、发布与维护等。 Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "},"publish/githubpage.html":{"url":"publish/githubpage.html","title":"发布到GitHub Pages","keywords":"","body":"发布到GitHub Pages 编写完的图书可以发布到GitHub Pages服务。 手动将静态站点资源发布到GitHub Pages 每次编辑提交图书文件(Markdown)前，构建生成静态站点文件到./docs目录，并将./docs目录提交到GitHub。 在GitHub平台上，项目面板中找到 Settings --> GitHub Pages，选择GitHub Pages资源来源 master branch /docs folder，这里将 /docs目录作为 GitHub Pages 资源。 缺点是每次提交都要手动构建生成静态站点。 Travis CI 自动发布到GitHub Pages 在使用 Travis CI 自动发布时，需先在Travis平台注册关联GitHub账户，并在仓库列表中选择目标项目并启动持续集成服务。 在GitHub项目中创建.travis.yml文件，并填写相关脚本，细节查看 GitHub Pages Deployment 示例： language: node_js node_js: - \"10\" # 缓存依赖 cache: directories: - $HOME/.npm before_install: - export TZ='Asia/Shanghai' # 更改时区 # 依赖安装 install: - npm install gitbook-cli -g # 安装 gitbook 插件 - gitbook install # 构建脚本 script: # 自定义输出目录 gitbook build src dest - gitbook build . ./docs # - gitbook build . ./build/$CUSTOM_PATH # 分支白名单 branches: only: - master # 只对 master 分支进行构建 # GitHub Pages 部署 deploy: provider: pages skip_cleanup: true # 在项目仪表盘的 Settings -> Environment Variables 中配置 github_token: $GITHUB_TOKEN # 将 build 目录下的内容推送到默认的 gh-pages 分支上，并不会连带 build 目录一起 local_dir: ./docs/ #fqdn: $CUSTOM_DOMAIN name: $GIT_NAME email: $GIT_EMAIL on: branch: master 配置完后，每次提交文件到GitHub服务，Travis会自动发布到GitHub Pages Copyright © eamiear all right reserved，powered by Gitbook该文件修订时间： 2019-05-29 09:36:27 "}}